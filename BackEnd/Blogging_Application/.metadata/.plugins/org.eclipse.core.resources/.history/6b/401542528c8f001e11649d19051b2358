package com.blog.service;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.blog.dao.CategoryDAO;
import com.blog.entities.Category;
import com.blog.entities.User;
import com.blog.exceptions.ResourceNotFoundException;
import com.blog.payloads.CategoryDto;
import com.blog.payloads.UserDTO;

@Service
public class CategoryServiceImpl implements CategoryService{
	
	@Autowired
	private CategoryDAO categoryDao;
	
	@Autowired
	private ModelMapper mapper;

	@Override
	public CategoryDto createCategory(CategoryDto cateDto) {
		// DTO was converted into Class
		Category cat = mapper.map(cateDto, Category.class);
		// Category was saved in database
		Category addedCat = categoryDao.save(cat);
		// again Category Class was converted into DTO as return type is DTO
		return mapper.map(addedCat, CategoryDto.class);
	}

	@Override
	public CategoryDto updateCategory(CategoryDto cateDto, Integer cateId) {
		//Category cat = mapper.map(cateDto, Category.class);
		 Category cate = categoryDao.findById(cateId)
				 .orElseThrow(()-> new ResourceNotFoundException("Category","id",cateId));
		 cate.setCategoryTitle(cateDto.getCategoryTitle());
		 cate.setCategorydescription(cateDto.getCategoryDescription());
		 
		 Category updatedCategory = categoryDao.save(cate);
		 CategoryDto categoryToDto = mapper.map(updatedCategory, CategoryDto.class);
		 return categoryToDto;
	}

	@Override
	public CategoryDto getCategory(Integer cateId) {
		Category cate = categoryDao.findById(cateId)
				.orElseThrow(()->new ResourceNotFoundException("Category","id",cateId));
		CategoryDto categoryToDto = mapper.map(cate, CategoryDto.class);
		return categoryToDto;
	}

	@Override
	public List<CategoryDto> getAllCategories() {
//		List<User> allUsers = userDao.findAll();
//		List<UserDTO> userDtos = allUsers.stream().map(user -> userToDto(user)).collect(Collectors.toList());	
//		return userDtos;
		
		List<Category> getAllcat = categoryDao.findAll();
		List<CategoryDto> cateDto = getAllcat.stream().map((categories) -> mapper.map(categories,CategoryDto.class)).collect(Collectors.toList());
		return cateDto;
	}

	@Override
	public void deleteCategory(Integer cateId) {
		Category cate = categoryDao.findById(cateId)
				.orElseThrow(()->new ResourceNotFoundException("Category","id",cateId));
		categoryDao.deleteById(cateId);
		
		
	}

}
